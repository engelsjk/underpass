// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package dbosm

import (
	"context"
)

const listByBoundingBox = `-- name: ListByBoundingBox :many
SELECT ST_AsGeoJSON(t.*)
FROM osm_all AS t
WHERE (
    ST_Intersects(
        t.geometry,
        ST_SetSRID(
            ST_MakeBox2D(
                ST_Point($1::float,$2::float),
                ST_Point($3::float,$4::float)
            ),
            4326
        )
    ) AND
    ST_GeometryType(t.geometry) IN ($5::text, $6::text) AND
    t.tags ? $7::text
)
`

type ListByBoundingBoxParams struct {
	LowLeftLon float64
	LowLeftLat float64
	UpRightLon float64
	UpRightLat float64
	Geom1      string
	Geom2      string
	Tag        string
}

func (q *Queries) ListByBoundingBox(ctx context.Context, arg ListByBoundingBoxParams) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, listByBoundingBox,
		arg.LowLeftLon,
		arg.LowLeftLat,
		arg.UpRightLon,
		arg.UpRightLat,
		arg.Geom1,
		arg.Geom2,
		arg.Tag,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var st_asgeojson interface{}
		if err := rows.Scan(&st_asgeojson); err != nil {
			return nil, err
		}
		items = append(items, st_asgeojson)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listByID = `-- name: ListByID :many
SELECT ST_AsGeoJSON(t.*)
FROM osm_all AS t
WHERE (
    t.osm_id = $1::bigint AND
    ST_GeometryType(t.geometry) IN ($2::text, $3::text) AND
    t.tags ? $4::text
)
`

type ListByIDParams struct {
	OsmID int64
	Geom1 string
	Geom2 string
	Tag   string
}

func (q *Queries) ListByID(ctx context.Context, arg ListByIDParams) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, listByID,
		arg.OsmID,
		arg.Geom1,
		arg.Geom2,
		arg.Tag,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var st_asgeojson interface{}
		if err := rows.Scan(&st_asgeojson); err != nil {
			return nil, err
		}
		items = append(items, st_asgeojson)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
